import { BrowserWindow, ipcMain, nativeTheme, webContents } from 'electron';
import isDev from 'electron-is-dev';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export abstract class MainWindow {
    static mainWindow: BrowserWindow | undefined = undefined;

    static async openMainWindow() {
        if (this.mainWindow !== undefined && this.mainWindow !== null) return this.mainWindow;
        const icon = (() => {
            switch (process.platform) {
                case 'darwin':
                    return path.join(process.cwd(), 'public', 'icon.icns');
                case 'linux':
                    return path.join(__dirname, '../../../', 'public', 'icon.png');
                case 'win32':
                    return path.join(process.cwd(), 'public', 'icon.ico');
                default:
                    return '';
            }
        })();

        this.mainWindow = new BrowserWindow({
            backgroundColor: '#10161f',
            autoHideMenuBar: !isDev,
            icon: icon,
            width: 1150,
            minWidth: isDev ? undefined : 1100,
            height: 880,
            minHeight: 880,
            webPreferences: {
                nodeIntegration: true,
                contextIsolation: true,
                webviewTag: true,
                preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
            },
            resizable: true
        });
        //nativeTheme.themeSource = 'dark';
        console.log("MAIN_WINDOW_WEBPACK_ENTRY",{MAIN_WINDOW_WEBPACK_ENTRY})
        this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

        if (isDev) {
            this.mainWindow.webContents.openDevTools();
        }

        this.mainWindow.on('closed', () => {
            ipcMain.removeHandler('message');
            this.mainWindow = undefined;
        });
        return this.mainWindow;
    }

    static async bringToFront() {
        if (process.platform === 'win32') {
            if (this.mainWindow) {
                if (this.mainWindow.isMinimized()) this.mainWindow.restore();
            } else {
                // Open main windows
                await this.openMainWindow();
            }

            this.mainWindow.setAlwaysOnTop(true);
            this.mainWindow.focus();
            this.mainWindow.setAlwaysOnTop(false);
        } else {
            await this.openMainWindow();
            this.mainWindow.show();
        }

        return this.mainWindow;
    }
}
